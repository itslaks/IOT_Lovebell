/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AnomalyRuleService } from "../anomalyRule.service";
import { AnomalyRuleCreateInput } from "./AnomalyRuleCreateInput";
import { AnomalyRule } from "./AnomalyRule";
import { AnomalyRuleFindManyArgs } from "./AnomalyRuleFindManyArgs";
import { AnomalyRuleWhereUniqueInput } from "./AnomalyRuleWhereUniqueInput";
import { AnomalyRuleUpdateInput } from "./AnomalyRuleUpdateInput";

export class AnomalyRuleControllerBase {
  constructor(protected readonly service: AnomalyRuleService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AnomalyRule })
  async createAnomalyRule(
    @common.Body() data: AnomalyRuleCreateInput
  ): Promise<AnomalyRule> {
    return await this.service.createAnomalyRule({
      data: data,
      select: {
        condition: true,
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AnomalyRule] })
  @ApiNestedQuery(AnomalyRuleFindManyArgs)
  async anomalyRules(@common.Req() request: Request): Promise<AnomalyRule[]> {
    const args = plainToClass(AnomalyRuleFindManyArgs, request.query);
    return this.service.anomalyRules({
      ...args,
      select: {
        condition: true,
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AnomalyRule })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async anomalyRule(
    @common.Param() params: AnomalyRuleWhereUniqueInput
  ): Promise<AnomalyRule | null> {
    const result = await this.service.anomalyRule({
      where: params,
      select: {
        condition: true,
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AnomalyRule })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAnomalyRule(
    @common.Param() params: AnomalyRuleWhereUniqueInput,
    @common.Body() data: AnomalyRuleUpdateInput
  ): Promise<AnomalyRule | null> {
    try {
      return await this.service.updateAnomalyRule({
        where: params,
        data: data,
        select: {
          condition: true,
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AnomalyRule })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAnomalyRule(
    @common.Param() params: AnomalyRuleWhereUniqueInput
  ): Promise<AnomalyRule | null> {
    try {
      return await this.service.deleteAnomalyRule({
        where: params,
        select: {
          condition: true,
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
