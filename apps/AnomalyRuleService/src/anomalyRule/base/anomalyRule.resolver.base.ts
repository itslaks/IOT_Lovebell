/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AnomalyRule } from "./AnomalyRule";
import { AnomalyRuleCountArgs } from "./AnomalyRuleCountArgs";
import { AnomalyRuleFindManyArgs } from "./AnomalyRuleFindManyArgs";
import { AnomalyRuleFindUniqueArgs } from "./AnomalyRuleFindUniqueArgs";
import { CreateAnomalyRuleArgs } from "./CreateAnomalyRuleArgs";
import { UpdateAnomalyRuleArgs } from "./UpdateAnomalyRuleArgs";
import { DeleteAnomalyRuleArgs } from "./DeleteAnomalyRuleArgs";
import { AnomalyRuleService } from "../anomalyRule.service";
@graphql.Resolver(() => AnomalyRule)
export class AnomalyRuleResolverBase {
  constructor(protected readonly service: AnomalyRuleService) {}

  async _anomalyRulesMeta(
    @graphql.Args() args: AnomalyRuleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AnomalyRule])
  async anomalyRules(
    @graphql.Args() args: AnomalyRuleFindManyArgs
  ): Promise<AnomalyRule[]> {
    return this.service.anomalyRules(args);
  }

  @graphql.Query(() => AnomalyRule, { nullable: true })
  async anomalyRule(
    @graphql.Args() args: AnomalyRuleFindUniqueArgs
  ): Promise<AnomalyRule | null> {
    const result = await this.service.anomalyRule(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AnomalyRule)
  async createAnomalyRule(
    @graphql.Args() args: CreateAnomalyRuleArgs
  ): Promise<AnomalyRule> {
    return await this.service.createAnomalyRule({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => AnomalyRule)
  async updateAnomalyRule(
    @graphql.Args() args: UpdateAnomalyRuleArgs
  ): Promise<AnomalyRule | null> {
    try {
      return await this.service.updateAnomalyRule({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AnomalyRule)
  async deleteAnomalyRule(
    @graphql.Args() args: DeleteAnomalyRuleArgs
  ): Promise<AnomalyRule | null> {
    try {
      return await this.service.deleteAnomalyRule(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
