/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { NetworkEvent } from "./NetworkEvent";
import { NetworkEventCountArgs } from "./NetworkEventCountArgs";
import { NetworkEventFindManyArgs } from "./NetworkEventFindManyArgs";
import { NetworkEventFindUniqueArgs } from "./NetworkEventFindUniqueArgs";
import { CreateNetworkEventArgs } from "./CreateNetworkEventArgs";
import { UpdateNetworkEventArgs } from "./UpdateNetworkEventArgs";
import { DeleteNetworkEventArgs } from "./DeleteNetworkEventArgs";
import { AlertFindManyArgs } from "../../alert/base/AlertFindManyArgs";
import { Alert } from "../../alert/base/Alert";
import { NetworkEventService } from "../networkEvent.service";
@graphql.Resolver(() => NetworkEvent)
export class NetworkEventResolverBase {
  constructor(protected readonly service: NetworkEventService) {}

  async _networkEventsMeta(
    @graphql.Args() args: NetworkEventCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [NetworkEvent])
  async networkEvents(
    @graphql.Args() args: NetworkEventFindManyArgs
  ): Promise<NetworkEvent[]> {
    return this.service.networkEvents(args);
  }

  @graphql.Query(() => NetworkEvent, { nullable: true })
  async networkEvent(
    @graphql.Args() args: NetworkEventFindUniqueArgs
  ): Promise<NetworkEvent | null> {
    const result = await this.service.networkEvent(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => NetworkEvent)
  async createNetworkEvent(
    @graphql.Args() args: CreateNetworkEventArgs
  ): Promise<NetworkEvent> {
    return await this.service.createNetworkEvent({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => NetworkEvent)
  async updateNetworkEvent(
    @graphql.Args() args: UpdateNetworkEventArgs
  ): Promise<NetworkEvent | null> {
    try {
      return await this.service.updateNetworkEvent({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => NetworkEvent)
  async deleteNetworkEvent(
    @graphql.Args() args: DeleteNetworkEventArgs
  ): Promise<NetworkEvent | null> {
    try {
      return await this.service.deleteNetworkEvent(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Alert], { name: "alerts" })
  async findAlerts(
    @graphql.Parent() parent: NetworkEvent,
    @graphql.Args() args: AlertFindManyArgs
  ): Promise<Alert[]> {
    const results = await this.service.findAlerts(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
