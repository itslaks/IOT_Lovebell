/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  NetworkEvent as PrismaNetworkEvent,
  Alert as PrismaAlert,
} from "@prisma/client";

export class NetworkEventServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.NetworkEventCountArgs, "select">
  ): Promise<number> {
    return this.prisma.networkEvent.count(args);
  }

  async networkEvents<T extends Prisma.NetworkEventFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.NetworkEventFindManyArgs>
  ): Promise<PrismaNetworkEvent[]> {
    return this.prisma.networkEvent.findMany<Prisma.NetworkEventFindManyArgs>(
      args
    );
  }
  async networkEvent<T extends Prisma.NetworkEventFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.NetworkEventFindUniqueArgs>
  ): Promise<PrismaNetworkEvent | null> {
    return this.prisma.networkEvent.findUnique(args);
  }
  async createNetworkEvent<T extends Prisma.NetworkEventCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.NetworkEventCreateArgs>
  ): Promise<PrismaNetworkEvent> {
    return this.prisma.networkEvent.create<T>(args);
  }
  async updateNetworkEvent<T extends Prisma.NetworkEventUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.NetworkEventUpdateArgs>
  ): Promise<PrismaNetworkEvent> {
    return this.prisma.networkEvent.update<T>(args);
  }
  async deleteNetworkEvent<T extends Prisma.NetworkEventDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.NetworkEventDeleteArgs>
  ): Promise<PrismaNetworkEvent> {
    return this.prisma.networkEvent.delete(args);
  }

  async findAlerts(
    parentId: string,
    args: Prisma.AlertFindManyArgs
  ): Promise<PrismaAlert[]> {
    return this.prisma.networkEvent
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .alerts(args);
  }
}
